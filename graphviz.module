<?php
// $Id: graphviz.module,v 1.1.2.5.2.7 2010/02/10 22:25:05 kratib Exp $
/**
 * @file Provides new "Graphviz" filter that interprets text as DOT syntax
 * and outputs corresponding rendering of the graph.
 */

define("GRAPHVIZ_REGEX", "/\[graphviz\](.*?)\[\/graphviz\]/si");
define("GRAPHVIZ_SUPPORTED_COMMANDS", "dot, neato, twopi, fdp, circo");

/**
 * include de new GraphViz-PHP library
 */

require_once 'libgv-php5/gv.php';

/**
 * Implementation of hook_filter().
 */
function graphviz_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
  case 'list':
    return array(0 => t('Graphviz (DOT) syntax'));
  case 'description':
    return t('Interprets text as DOT syntax and renders the generated graph with the specified format.');
  case 'no cache':
  	return true;
  case 'process':
    return preg_replace_callback(GRAPHVIZ_REGEX, "_graphviz_process", $text);
  case 'settings':
    return _graphviz_settings();
  default:
    return $text;
  }
}

/**
 * Implementation of hook_filter_tips().
 */
function graphviz_filter_tips($delta, $format, $long = false) {
  $output = '';
  if ($long) {
    $output .= t('<h4>Using Graphviz filter</h4>');
  }
  $output .= t('Use <a href="@dot">DOT syntax</a> with some additional commands embedded in the comments.', array('@dot' => url('http://www.graphviz.org/Documentation.php')));
  $output .= '&nbsp;';
  return $output;
}

/**
 * Implementation of hook_file_download().
 */
function graphviz_file_download($file) {
  $file = file_create_path($file);
  if (strpos($file, file_directory_path() .'/graphviz') !== FALSE) {
    return array(
      'Content-Length: '.filesize($file),
    );
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function graphviz_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($op == 'delete') { // delete the Graphviz rendering if any
    $matches = array();
    if (preg_match_all(GRAPHVIZ_REGEX, $node->body, $matches)) {
      $dir = file_directory_path() .'/graphviz';
      foreach ($matches[1] as $match) {
        $match = str_replace(array("\r\n", "\r"), "\n", $match); // do like filter.module
        $basename = md5($match);
        foreach (file_scan_directory($dir, $basename) as $file) {
          file_delete($file->filename);
        }
      }
    }
  }
}

function _graphviz_settings() {
  $form = array();
  $form['graphviz'] = array(
    '#type' => 'fieldset',
    '#title' => 'Graphviz Filter',
  );

  //
  // selectable node types
  //
  $form['graphviz']['graphviz_nt'] = array(
    '#title' => t('Selectable node types'),
    '#description' => t('Select the node types that can be resubmitted.'),
    '#type' => 'fieldset',
  );

  $types = node_get_types();
  foreach ($types as $node ) {
    $selectable_node_types[$node->type] = t('!name (!desc)',
    array('!name' => $node->name, '!desc' => $node->description));
  }
  $form['graphviz']['graphviz_nt']['graphviz_selected_node_types'] = array(
    '#title' => '',
    '#type' => 'checkboxes',
    '#options' => $selectable_node_types,
    '#default_value' => (array)variable_get('graphviz_selected_node_types', array()),
  );
  
  return $form;
}

function _graphviz_process($matches) {
  return graphviz_process($matches[1]);
}

function graphviz_process($text) {
  // Parse arguments.
  // dpm("I'm inside the process function $text");
    
  // Add usefull information
  $g = gv::readstring($text);
  $n = gv::firstnode($g);
  while (gv::ok($n)) {
   //$text = $text.'node '.gv::nameof($n).' ';
   $e = gv::firstout($n);
   $url = gv::getv($n,'URL');
   $db_result = db_query(db_rewrite_sql("SELECT n.nid, n.type, n.title FROM {node} n WHERE LOWER(n.title) = LOWER('%s')", 't', 'tid'), trim(gv::nameof($n)));
   $result = array();
   while ($term = db_fetch_object($db_result)) {
    $result[] = $term;
   }
   //dpm ("Node Name:".$node[0]->name." GV name: ".gv::nameof($n)." ".count($node));
   if (count($result)>0) {
   	 dpm ($result);
   	 $url =  url('/node/'.$result[0]->nid);
     gv::setv($n,'URL',$url);
     gv::setv($n,'shape','tab');
     gv::setv($n,'label','<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td bgcolor="black" align="center" colspan="2"><font color="white">'.$result[0]->type.'</font></td></tr><tr><td align="left" port="r4">'.$result[0]->title.'</td><td bgcolor="grey" align="right">1</td></tr></table>>');
     switch ($result[0]->type) {
        case 'page':
           gv::setv($n,'shape','component');
           break;
        case 'story':
           gv::setv($n,'shape','folder');
           break; 
     } 
   }
   while (gv::ok($e)) {
      //$text = $text.'edge '.gv::nameof(gv::tailof($e)).'->'.gv::nameof(gv::headof($e)).' ';
      $e = gv::nextout($n,$e);
   }
   $n = gv::nextnode($g,$n);
  }
  
  gv::layout($g,'dot');
  $text = gv::renderdata($g,'dot');  
  
  // Create a temporary file with the DOT script.
  $outdir = file_directory_path().'/graphviz';
  file_check_directory($outdir, FILE_CREATE_DIRECTORY);
  $inpath = file_create_path($outdir .'/'. md5($text) .'.dot');
  file_put_contents($inpath, $text);
  //dpm("I'm inside the process function $inpath , $text");
    
  // Render desired formats.
  $output = '';
  $outpath = file_create_path($outdir .'/'. md5($text) .'.svg');
  if (file_exists($outpath) || gv::render($g,'svg',$outpath)) {
  	$output .= '<div class="graphviz graphviz-"'. $formats[$format]['format'] .'>';
    $output .= '<embed type="image/svg+xml" src="'. file_create_url($outpath) .'"  />';
    $output .= '</div>';
  } else {
    $msg = 'Graphviz encountered an error while rendering to format %format:%outfile<br />';
    $arg = array('%format' => 'svg','%outfile' => $outpath);
    drupal_set_message(t($msg, $arg), 'error');
    watchdog('graphviz filter', $msg, $arg, WATCHDOG_ERROR);
  }
  gv::rm($g);
  return $output;
}

function graphviz_form_validate($form, &$form_state)
{
   //Validation stuff here, set $error to true if something went wrong, or however u want to do this.  Completely up to u in how u set errors.
   if ($error)
   {
      form_set_error('new_field_name', 'AHH SOMETHING WRONG!');
   }
}

function graphviz_form_submit($form, &$form_state)
{
    //Save the new value.
    queryable_variables_set('new_field_name', $form_state['values']['new_field_name'], 'tid', $form['#term']['tid']);  // I used taxonomy as an example.  How you save data is completely up to u and this is nothing more than a simple example and shouldnt be used as a test.
}
